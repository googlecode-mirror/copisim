<?php

/**
 * CopisimSimulationTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CopisimSimulationTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object CopisimSimulationTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('CopisimSimulation');
    }

		public function setSimulation()
		{
			$etudiants = Doctrine_Query::create()
			  ->from('CopisimEtudiant a')
				->orderBy('a.classement asc')
				->execute();

			foreach($etudiants as $etudiant)
			{
				$simulation = new CopisimSimulation();
				$simulation->setEtudiant($etudiant->getClassement());
				$simulation->setPoste(null);
				$simulation->save();
			}
		}

		private function testChoix($max)
		{
			for($i = 0 ; $i < $max ; $i++)
			{
				$o = new CopisimChoix();
				$o->setEtudiant(rand(1,600));
				$o->setPoste(rand(1,260));
				$o->setOrdre(rand(0,4));
				$o->save();
			}
		}
	
   /*
	   Simulation des choix en utilisant une table temporaire
		 Attention : génère une erreur max time exceeded 30s si plus de 600 utilisateurs
	*/
		public function simulChoix($periode)
		{
//			$this->setSimulation();
// $this->testChoix(2000);
			$postes = Doctrine::getTable('CopisimPoste')->getPostesTableau($periode);
			
			$q = Doctrine_Query::create()
			  ->from('CopisimChoix a')
				->leftJoin('a.CopisimEtudiant b')
				->leftJoin('a.CopisimPoste c')
//				->select('a.etudiant, a.poste')
//				->leftJoin('c.CopisimRegion d')
//				->leftJoin('c.CopisimFiliere e')
				->orderBy('b.classement asc, a.ordre asc');
				
			$r = Doctrine_Query::create()
			  ->from('CopisimSimulation a')
				->leftJoin('a.CopisimEtudiant b')
				->select('a.etudiant, b.classement, a.poste')
				->orderBy('b.classement asc');
				
			$choixs = $q->execute();
			$simulations = $r->execute();

			$prev = '';
			$i = 0;
//			$simulations[$i]->setPoste(null);
			
			foreach($choixs as $choix)
			{
				while($simulations[$i]->getCopisimEtudiant()->getClassement() !== $choix->getCopisimEtudiant()->getClassement())
				{
					$i++;
					$simulations[$i]->setPoste(null);
				}

				if($prev === $choix->getCopisimEtudiant()->getClassement())
					continue;
			
			  if($postes[$choix->getCopisimPoste()->getCopisimFiliere()->getTitre()][$choix->getCopisimPoste()->getCopisimRegion()->getTitre()] > 0)
				{
					$postes[$choix->getCopisimPoste()->getCopisimFiliere()->getTitre()][$choix->getCopisimPoste()->getCopisimRegion()->getTitre()]--;
					$simulations[$i]->setPoste($choix->getPoste());
					$prev = $choix->getCopisimEtudiant()->getClassement();
					continue;
				}
			}

			$simulations->save();			
		}

    public function simulChoixPager($debut, $fin, $periode)
		{
//      $this->setSimulation();
//  $this->testChoix(2000);
			$postes = $this->updatePostes(Doctrine::getTable('CopisimPoste')->getPostesIdTableau($periode), $debut);
			
			$q = Doctrine_Query::create()
			  ->from('CopisimChoix a')
				->leftJoin('a.CopisimEtudiant b')
				->leftJoin('a.CopisimPoste c')
				//        ->select('a.etudiant, a.poste')
				//        ->leftJoin('c.CopisimRegion d')
				//        ->leftJoin('c.CopisimFiliere e')
				->where('b.classement >= ?', $debut)
				->andWhere('b.classement <= ?', $fin)
				->andWhere('a.ordre > ?', '0')
				->orderBy('b.classement asc, a.ordre asc');
				
			$r = Doctrine_Query::create()
	  		->from('CopisimSimulation a')
				->leftJoin('a.CopisimEtudiant b')
				->select('a.etudiant, b.classement, a.poste, a.reste')
				->where('b.classement >= ?', $debut)
				->andWhere('b.classement <= ?', $fin)
				->orderBy('b.classement asc');
				
			$choixs = $q->execute();
			$simulations = $r->execute();
			
			$prev = '';
			$i = 0;
			$simulations[$i]->setPoste(null);
			$simulations[$i]->setReste(null);
			
			foreach($choixs as $choix)
			{
				while($simulations[$i]->getCopisimEtudiant()->getClassement() !== $choix->getCopisimEtudiant()->getClassement())
				{
					$i++;
					$simulations[$i]->setPoste(null);
					$simulations[$i]->setReste(null);
				}
				
				if($prev === $choix->getCopisimEtudiant()->getClassement())
					continue;
					
				if($postes[$choix->getPoste()] > 0)
			  {
				  $postes[$choix->getPoste()]--;
					$simulations[$i]->setPoste($choix->getPoste());
					$simulations[$i]->setReste($postes[$choix->getPoste()]);
					$prev = $choix->getCopisimEtudiant()->getClassement();
					continue;
				}
			}

			$simulations->save();
		}

    /*
		  Mise à jour du tableau de postes restants avec les étapes précédentes de la simulation
		*/
		private function updatePostes($postes, $limite = null)
		{
			foreach($postes as $poste=>$total)
			{
				$q = Doctrine_Query::create()
				  ->from('CopisimSimulation a')
					->select('a.reste')
					->where('a.poste = ?', $poste)
					->orderBy('a.reste asc')
					->limit(1);

				if($limite)
					$q->andWhere('a.etudiant < ?', $limite);

				if($reste = $q->fetchOne())
					$postes[$poste] = $reste->getReste();
			}

			return $postes;
		}

		public function getMaxEtudiant()
		{
			$max_id = Doctrine_Query::create()
			  ->from('CopisimSimulation a')
				->select('a.etudiant')
				->orderBy('a.etudiant desc')
				->limit(1)
				->fetchOne();

			return $max_id->getEtudiant();
		}

		public function getSimulEtudiant($etudiant)
		{
			$q = Doctrine_Query::create()
			  ->from('CopisimSimulation a')
				->leftJoin('a.CopisimPoste b')
				->leftJoin('b.CopisimFiliere c')
				->leftJoin('b.CopisimRegion d')
				->where('etudiant = ?', $etudiant)
				->limit(1);

			return $q->fetchOne();
		}

		public function getAbsents($limit = null)
		{
			$q = Doctrine_Query::create()
			  ->from('CopisimSimulation a')
				->where('a.poste = ?', null);

			if($limit)
				$q->andWhere('etudiant < ?', $limit);

			$absents = $q->execute();

			return $absents->count();
		}

}
